{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./common/utils/apiUtil.js","webpack:///./functions/drugSearch/drugSearchCtrl.js","webpack:///./functions/drugSearch/services/nlmSearch.js","webpack:///./handler.js","webpack:///external \"axios\""],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFa;;AAEb,cAAc,mBAAO,CAAC,oBAAO;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA,E;;;;;;;;;;;;AClBa;;AAEb,kBAAkB,mBAAO,CAAC,0EAAsB;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;;AAEA,qBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA,SAAS;AACT;AACA;AACA,sCAAsC,2BAA2B;AACjE;AACA,aAAa;AACb;AACA,KAAK;AACL,E;;;;;;;;;;;;ACrFa;;AAEb,gBAAgB,mBAAO,CAAC,gEAA+B;;AAEvD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;;AAEjB;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;;;;;;;;;;;;ACzIa;;AAEb,mBAAmB,mBAAO,CAAC,uFAAuC;;AAElE;AACA;AACA;;;;;;;;;;;;ACNA,kC","file":"handler.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./handler.js\");\n","'use strict';\n\nconst axios = require('axios');\n\nexports.submitRequest = async function(url, headers) {\n    try {\n        let result = {\n            statusCode: 500,\n            data: {}\n        };\n        return axios.get(url, headers).then(response => {\n            result.statusCode = response.status;\n            result.data = response.data;\n            return result;\n        });\n    } catch (error) {\n        console.error(error);\n    }\n};","'use strict';\n\nconst nlmSearch = require('./services/nlmSearch');\n\n// Headers needed for Locked Down APIs\nconst headers = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers':\n        'Origin, X-Requested-With, Content-Type, Accept, X-Api-Key, Authorization',\n    'Access-Control-Allow-Credentials': 'true'\n};\n\n/**\n * Drug Identifier Search Endpoint\n *\n * @param {*} query Required Query Input: Name or NDC\n * @returns {Promise} drug identifiers\n */\nmodule.exports.getDrugIdentifiers = query => {\n    return new Promise(async resolve => {\n        let resp = {\n            results: {\n                name: '',\n                identifier: {},\n            },\n            errors: [],\n            statusCode: 400\n        };\n\n        if (query) {\n            let drugName = query.queryStringParameters.drugName;\n            if (!drugName) {\n                resolve({\n                    statusCode: 400,\n                    body: JSON.stringify({\n                        error: 'Drug name parameter is empty!!!'\n                    }),\n                    headers: headers\n                });\n            } else {\n\n                let nlmRxImageSuccess = false;\n                let nlmDrugDatabaseSuccess = false;\n\n                // Call the NLM Drug Image Search Service\n                await nlmSearch\n                    .nlmDrugImageSearch(drugName)\n                    .then(async response => {\n                        resp.results.identifier = {\n                            name: drugName,\n                            nlmRxImages: response.data\n                        };\n                        nlmRxImageSuccess = response.success;\n\n                        // Use the RXCUIs from the images to grab\n                        // markings from the NLM Discovery Search\n                        // service\n                        for (let image of resp.results.identifier.nlmRxImages) {\n                            await nlmSearch\n                                .nlmDataDiscoverySearch(image.rxcui)\n                                .then(response => {\n                                    image.markings = response.data;\n                                    nlmDrugDatabaseSuccess = true;\n                                })\n                                .catch(error => resp.errors.push(error));\n                        }\n\n                    })\n                    .catch(error => resp.errors.push(error));\n\n                resolve({\n                    statusCode: nlmRxImageSuccess || nlmDrugDatabaseSuccess ? 200 : 400,\n                    body: JSON.stringify(nlmRxImageSuccess || nlmDrugDatabaseSuccess ? resp.results : resp.errors),\n                    headers: headers\n                });\n            }\n\n        } else {\n            resolve({\n                statusCode: 400,\n                body: JSON.stringify({ error: 'Query is empty!' }),\n                headers: headers\n            });\n        }\n    });\n};","'use strict';\n\nconst apiUtil = require('../../../common/utils/apiUtil');\n\nconst baseRxImageUrl = 'http://rximage.nlm.nih.gov/api/rximage/1';\n\nconst nlmDataDiscoveryUrl =\n    'https://datadiscovery.nlm.nih.gov/resource/crzr-uvwg.json?';\n\n/**\n * NLM RxImage returns images per manufacturer of a drug.\n * A name string is required.\n *\n * @param {String} name drug name\n * @returns {Promise} NLM RxImages\n */\nmodule.exports.nlmDrugImageSearch = function(name) {\n    return new Promise(async resolve => {\n        let result = {\n            success: false,\n            data: {}\n        };\n\n        // Only Process the request if name or ndc exists\n        if (name) {\n            let nameArg = name ? 'name=' + name : '';\n\n            // Format Request URL\n            let identifierSearchUrl = baseRxImageUrl + '/rxbase?' + nameArg;\n\n            await apiUtil\n                .submitRequest(identifierSearchUrl)\n                .then(response => {\n                    if (response.statusCode == 200){\n                        result.data = remapImageResults(response.data.nlmRxImages);\n                        result.success = true;\n                    }\n                })\n                .catch(error => {\n                    resolve({\n                        error: error\n                    })\n                });\n\n            resolve(result);\n        }\n    });\n};\n\n/**\n * NLM Data Discovery returns markings per rxcui provided.\n * A rxcui string is required for this search.\n *\n * @param {String} rxcui rxcui\n * @returns {Promise} drug markings per rxcui\n */\nmodule.exports.nlmDataDiscoverySearch = function(rxcui) {\n    return new Promise(async resolve => {\n        let result = {\n            success: false,\n            data: []\n        };\n\n        // Only Process the request if name or ndc exists\n        if (rxcui) {\n            let rxcuiArg = rxcui ? 'rxcui=' + rxcui : '';\n\n            // Format Request URL\n            let identifierSearchUrl = nlmDataDiscoveryUrl + rxcuiArg;\n\n            await apiUtil\n                .submitRequest(identifierSearchUrl)\n                .then(response => {\n                    if (response.statusCode == 200) {\n                        result.success = true;\n                        result.data = remapMarkingResults(response.data);\n                    }\n                    resolve(result);\n                })\n                .catch(error => {\n                    resolve({\n                        error: error\n                    })\n                });\n        } else {\n            resolve({\n                error: 'RXCUI is required for search.'\n            });\n        }\n    });\n};\n\nfunction remapMarkingResults(data) {\n    let markingsCollection = [];\n\n    if (data.length > 0) {\n        for (let result of data) {\n            markingsCollection.push({\n                medicine_name: result.medicine_name,\n                marketing_act_code: '',\n                ndc9: result.ndc9,\n                rxcui: result.rxcui,\n                rxstring: result.rxstring,\n                rxtty: result.rxtty,\n                splIngredients: result.spl_ingredients,\n                splStrength: result.spl_strength,\n                splColor: result.splColor,\n                splColorText: result.splcolor_text,\n                splImprint: result.splimprint,\n                splShape: result.splshape,\n                splShapeText: result.splshape_text,\n                splSize: result.splsize\n            });\n        }\n    }\n\n    return markingsCollection;\n};\n\nfunction remapImageResults(data) {\n    let imageCollection = [];\n    if (data.length > 0) {\n        for (let image of data) {\n            imageCollection.push({\n                rxcui: image.rxcui,\n                ndc11: image.ndc11,\n                splSetId: image.splSetId,\n                splVersion: image.splVersion,\n                name: image.name,\n                labeler: image.labeler,\n                imageUrl: image.imageUrl,\n                imageSize: image.imageSize,\n                markings: []\n            });\n        }\n    }\n    return imageCollection;\n};\n","'use strict';\n\nconst drugSearch = require('./functions/drugSearch/drugSearchCtrl');\n\nmodule.exports.getDrugIdentifiers = async (event) => {\n  return drugSearch.getDrugIdentifiers(event);\n};\n","module.exports = require(\"axios\");"],"sourceRoot":""}